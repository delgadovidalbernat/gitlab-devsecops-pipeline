# Security-as-a-Service for GitLab CI/CD
# This file is designed to be included in other pipelines

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE

variables:
  GITLEAKS_VERSION: "v8.27.2"
  # Default configuration. The pipeline including this file can override it
  DEVSECOPS_CONFIG: |
    secrets:
      enabled: true
      fail_on_detection: false
      redact: true
    sast:
      enabled: true
    sca:
      enabled: true
    dast:
      enabled: false

.rules_variable_extractor:
  stage: .pre
  image: alpine:3.18
  script:
    - apk add --no-cache yq
    - echo "Extracting variables from DEVSECOPS_CONFIG..."
    - FAIL_VALUE=$(echo "$DEVSECOPS_CONFIG" | yq e '.secrets.fail_on_detection // false')
    - echo "FAIL_ON_SECRET_DETECTION=$FAIL_VALUE" >> variables.env
    - echo "Variable extracted: FAIL_ON_SECRET_DETECTION=$FAIL_VALUE"
  artifacts:
    reports:
      dotenv: variables.env

# Base template for all security jobs
.devsecops_template:
  stage: security
  image: alpine:3.18
  needs:
    - job: .rules_variable_extractor
      artifacts: true
  before_script:
    - apk add --no-cache yq jq git docker
    - echo "$DEVSECOPS_CONFIG" > /tmp/devsecops-config.yml
    - echo "Configuration loaded:"
    - cat /tmp/devsecops-config.yml
  services:
    - name: docker:24.0-dind
      alias: docker
  artifacts:
    expire_in: 1 week
    when: always

# Secret Detection job with GitLeaks
devsecops_secrets:
  extends: .devsecops_template
  script:
    - |
      echo "Starting secret detection with GitLeaks..."
      SECRETS_ENABLED=$(yq e '.secrets.enabled // true' /tmp/devsecops-config.yml)
      if [ "$SECRETS_ENABLED" != "true" ]; then
        echo "Secret detection disabled in configuration"
        echo '{"vulnerabilities": []}' > gl-secret-detection-report.json
        exit 0
      fi
      
      GITLEAKS_CMD="detect --source /code --report-format gitlab --report-path /code/gl-secret-detection-report.json --verbose"
      REDACT_ENABLED=$(yq e '.secrets.redact // true' /tmp/devsecops-config.yml)
      if [ "$REDACT_ENABLED" = "true" ]; then
        GITLEAKS_CMD="$GITLEAKS_CMD --redact"
      fi
      
      echo "Running GitLeaks via Docker..."
      echo "Command: gitleaks $GITLEAKS_CMD"
      
      # Run GitLeaks - it returns non-zero exit code if secrets are found
      docker run --rm -v "$(pwd):/code" "zricethezav/gitleaks:$GITLEAKS_VERSION" $GITLEAKS_CMD || true
      
      # Ensure report exists
      if [ ! -f gl-secret-detection-report.json ]; then
        echo '{"vulnerabilities": []}' > gl-secret-detection-report.json
      fi
      
      FINDINGS_COUNT=$(jq '.vulnerabilities | length' gl-secret-detection-report.json 2>/dev/null || echo "0")
      
      if [ "$FINDINGS_COUNT" -gt 0 ]; then
        echo "Warning: $FINDINGS_COUNT secret(s) detected. Check the Security tab for details."
        
        echo "Summary of detected secrets:"
        jq -r '.vulnerabilities[] | "- \(.category): \(.location.file):\(.location.start_line)"' gl-secret-detection-report.json 2>/dev/null || echo "Could not parse findings"
      else
        echo "Success: No secrets detected"
      fi
  artifacts:
    reports:
      secret_detection: gl-secret-detection-report.json
  rules:
    - if: $CI_PIPELINE_SOURCE && $FAIL_ON_SECRET_DETECTION == "true"
      when: on_success
      allow_failure: false
    - if: $CI_PIPELINE_SOURCE
      when: on_success
      allow_failure: true
